type: retail-app

components:
  packager:
    type: webpack
    inputs:
      entry: ${self.path}/frontend/src/index.js
      env:
        NODE_ENV: production
        API_URL: ${productsApi.url}
      favicon: static/favicon.ico
      template: ${self.path}/frontend/templates/index.ejs

  webFrontend:
    type: rg-staticweb
    inputs:
      name: retail-frontend
      contentPath: ${packager.output.path}
      contentIndex: index.html
      contentError: error.html
      hostingRegion: us-east-1
      hostingDomain: serverless-retail-site-test-brian.example.com
      aliasDomain: www.serverless-retail-site-test-brian.example.com

  createProduct:
    type: lambda
    inputs:
      name: retail-createProduct
      memory: 512
      timeout: 10
      handler: code/products.create
  getProduct:
    type: lambda
    inputs:
      name: retail-getProduct
      memory: 512
      timeout: 10
      handler: code/products.get
  listProducts:
    type: lambda
    inputs:
      name: retail-listProducts
      memory: 512
      timeout: 10
      handler: code/products.list
  productsApi:
    type: rest-api
    inputs:
      gateway: apigateway
      name: retail-productsApi
      routes:
        /products: # routes begin with a slash
          post: # HTTP method names are used to attach handlers
            function: ${createProduct}
            cors: true

          # sub-routes can be declared hierarchically
          /{id}: # path parameters use curly braces
            get:
              function: ${getProduct}
              cors: true # CORS can be allowed with this flag

        # multi-segment routes can be declared all at once
        /catalog/{...categories}: # catch-all path parameters use ellipses
            get:
              function: ${listProducts}
              cors: true
